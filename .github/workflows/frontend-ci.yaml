name: Build and Push to ECR

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  id-token: write # Required for OIDC token request
  contents: write # Required for checkout

jobs:
  build-and-push:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment: production
    # outputs:
    #   ECR_IMAGE: ${{ steps.set-output.outputs.ECR_IMAGE }}
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js 18.x # Sets up Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: "18.x" # Or your desired Node.js version
          cache: "npm" # Caches npm dependencies to speed up subsequent runs

      - name: Install dependencies # Installs project dependencies
        run: npm ci # Use npm ci for clean installs in CI environments

      - name: Run build # Executes the build script defined in package.json
        run: npm run build

      # - name: Echo Environment Variables
      #   run: |
      #     echo "API_URL is $REPO_NAME"
      #     echo "REGION is $REGION"
      # env:
      #   REPO_NAME: ${{ vars.AWS_ECR_REPO_NAME }} # From 'production' environment
      #   REGION: ${{ secrets.AWS_REGION }} # From repository secretsd

      # - name: Configure AWS credentials

      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ECR_ROLE_NAME }} # Your role ARN
      #     aws-region: ${{ secrets.AWS_REGION }} # Your region
      #     # role-duration-seconds: 3600

      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Build, tag, and push Docker image to ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ vars.AWS_ECR_REPO_NAME }} # Your ECR repo name
      #     IMAGE_TAG: ${{ github.run_id }} # Or use 'latest' or a semantic version

      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./frontend/Dockerfile ./frontend
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      # - name: Set output variables
      #   id: set-output
      #   run: echo "ECR_IMAGE='033849514070ssdsdsd'" >> "$GITHUB_OUTPUT"

  # update-artifact:
  #   if: github.event_name == 'pull_request'
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   steps:
  #     - name: Store run_id as artifact
  #       run: echo "${{ github.run_id }}" > run-id.txt

  #     - name: Upload run_id artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: run-id
  #         path: run-id.txt
  #         retention-days: 1
  update-k8s:
    if: |
      github.event_name == 'push' &&
      !contains(github.event.head_commit.message, '[CI]:')
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
      - name: Configure AWS credentials

        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ECR_ROLE_NAME }} # Your role ARN
          aws-region: ${{ secrets.AWS_REGION }} # Your region
          # role-duration-seconds: 3600

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.AWS_ECR_REPO_NAME }} # Your ECR repo name
          IMAGE_TAG: ${{ github.run_id }} # Or use 'latest' or a semantic version

        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./frontend/Dockerfile ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            # Use a personal access token with repo access
      # - name: Download run_id artifact
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: run-id
      #     path: .

      # - name: Read run_id from artifact
      #   id: read-run-id
      #   run: |
      #     RUN_ID=$(cat run-id.txt)
      #     echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
      - name: update k8s deployment file
        run: |
          sed -i 's#image: .*#image: ${{secrets.AWS_ACCOUNT_ID}}.dkr.ecr.${{secrets.AWS_REGION}}.amazonaws.com/${{ vars.AWS_ECR_REPO_NAME }}:${{ github.run_id }}#g' ./frontend/aws-eks-react-deployment.yaml
      - name: commit changes
        run: |
          git config --global user.name "utkarsh4321"
          git config --global user.email "utkarshsrivastava434@gmail.com"
          git add ./frontend/aws-eks-react-deployment.yaml
          git commit -m '[CI]: Update ECR image in Kubernetes deployment'
          git push
